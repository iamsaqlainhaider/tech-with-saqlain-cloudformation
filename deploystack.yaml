AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a single EC2 instance in a new VPC
  with basic networking and Nginx installation.
Parameters:
  EnvironmentStage:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - uat
    - prod
    Description: Environment name
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to SSH into the instance
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value:
          Fn::Sub: vpc-${EnvironmentStage}
    Metadata:
      SamResourceId: VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: igw-${EnvironmentStage}
    Metadata:
      SamResourceId: InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
    Metadata:
      SamResourceId: AttachGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-southeast-2a
      Tags:
      - Key: Name
        Value:
          Fn::Sub: public-subnet-${EnvironmentStage}
    Metadata:
      SamResourceId: PublicSubnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: route-table-${EnvironmentStage}
    Metadata:
      SamResourceId: RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
    Metadata:
      SamResourceId: Route
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: RouteTable
    Metadata:
      SamResourceId: SubnetRouteTableAssociation
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: sg-${EnvironmentStage}
    Metadata:
      SamResourceId: SecurityGroup
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName:
        Ref: KeyPairName
      ImageId: ami-01347fdc7a9172350
      SubnetId:
        Ref: PublicSubnet
      SecurityGroupIds:
      - Ref: SecurityGroup
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ec2-${EnvironmentStage}
      - Key: Environment
        Value:
          Ref: EnvironmentStage
      UserData:
        Fn::Base64:
          Fn::Sub: '#!/bin/bash

            yum update -y

            amazon-linux-extras install nginx1 -y

            systemctl start nginx

            systemctl enable nginx

            '
    Metadata:
      SamResourceId: MyEC2Instance
Outputs:
  EC2PublicIP:
    Description: Public IP of the EC2 instance
    Value:
      Fn::GetAtt:
      - MyEC2Instance
      - PublicIp
  EC2InstanceId:
    Description: EC2 instance ID
    Value:
      Ref: MyEC2Instance
  EC2SecurityGroup:
    Description: Security group for EC2
    Value:
      Ref: SecurityGroup
  VPCId:
    Description: VPC ID
    Value:
      Ref: VPC
